#!/bin/bash

set -eu

cd "${0%/*}"

mkdir -p game/src/api
rm -f game/src/api/*

# cat schema.schema | jq '. += { "anyOf": ['$(cat schema.schema | jq -r '.definitions | keys[]' | sed 's/$/"}/;s/^/{"$ref":"#definitions\//' | paste -sd ',')']}' > schema2.schema

./node_modules/.bin/quicktype \
  -o game/src/api/API.hpp \
  --lang c++ \
  --code-format with-struct \
  --no-boost \
  --source-style multi-source \
  --namespace API \
  --src-lang schema \
  "./schema.schema#/definitions/"

# avert your eyes, this next part is a crime

cd game/src/api

find . -type f \
  | grep -v Generators.hpp \
  | grep -v helper.hpp \
  | xargs -L1 sed -i -E '/json|helper.hpp|^\/\//d'

sed -i -E '/pragma|^\/\//d' Generators.hpp

find . -type f \
  | xargs -L1 basename \
  | cut -d'.' -f1 \
  | xargs -I {} sed -i 's/{}Type type;/{}Type type = static_cast<{}Type>(0);/g' {}.hpp

mv Generators.hpp API.cpp

grep "struct.*{" * -l \
  | grep -vE 'helper\.hpp|API\.cpp' \
  | xargs sed -i '/struct.*{/a std::string toString() const;\nvoid fromString(const std::string &str);'

structs=$(grep "struct.*{" * \
  | grep -v "^helper.hpp" \
  | cut -d':' -f2 \
  | sed 's/.*struct \(.*\) {/\1/')

echo "namespace API {" >> API.cpp
for struct in $structs; do
  echo "std::string $struct::toString() const {" >> API.cpp
  echo "json j;" >> API.cpp
  echo "to_json(j, *this);" >> API.cpp
  echo "return j.dump();" >> API.cpp
  echo "}" >> API.cpp
  echo "void $struct::fromString(const std::string &s) {" >> API.cpp
  echo "auto j = json::parse(s);" >> API.cpp
  echo "from_json(j, *this);" >> API.cpp
  echo "}" >> API.cpp
done
echo "}" >> API.cpp

sed -i '1s/^/#include <vector>\n/' API.hpp 
sed -i '1s/^/#include <memory>\n/' API.hpp
